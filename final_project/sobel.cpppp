#include <iostream>
#include <ostream>
#include <istream>
#include "opencv2/highgui.hpp"
#include "opencv2/opencv.hpp"
#include "opencv2/core/ocl.hpp"

#include <CL/cl.hpp>
#include <CL/cl.h>


#define KERNELS "kernels.cl"

class ArgParser{
    public:
        static const char *parse(int argc, char**argv){
            if (argc != 2)
            {
                std::cerr << "sobel <video_file> " << std::endl;
                exit(EXIT_FAILURE);
            }
            return argv[1];
        }
};
std::string readKernel(const char *fileName){
    std::ifstream file(fileName);
     std::string content( (std::istreambuf_iterator<char>(file) ),
                       (std::istreambuf_iterator<char>()    ) );
    return content;
}

cv::Mat grayScale(cv::Mat &reg, cv::ocl::Context &context)
{


    cv::Mat gray(reg.rows, reg.cols, CV_8UC1, cv::Scalar(0));
    // Step 1 - umat
    cv::UMat uReg = reg.getUMat(cv::ACCESS_READ, cv::USAGE_ALLOCATE_DEVICE_MEMORY);
    cv::UMat uGray(reg.size(), CV_8UC1, cv::ACCESS_WRITE, cv::USAGE_ALLOCATE_DEVICE_MEMORY);
    std::string sourceKernal = readKernel("gray_scale.cl");
    cv::ocl::ProgramSource programSrc(sourceKernal);

    // Step 2 - compile the kernel code
    cv::String errmsg;
    cv::String buildopt = cv::format("-D T=%s", cv::ocl::typeToStr(uGray.depth())); // "-D dstT=float"
    cv::ocl::Program program = context.getProg(programSrc, buildopt, errmsg);

    // Step 3 - Image2D
    cv::ocl::Kernel kernel("gray_scale", program);
    kernel.args(reg.data, gray.data);

    // Step 4 - run the kernel
    size_t globalThreads[3] = {reg.cols*reg.rows,1, 1};
    if(!kernel.run(3, globalThreads, NULL, true)){
        std::cout <<  "Failed running the kernel..." << std::endl;
        exit(EXIT_FAILURE);
    }
    return uGray.getMat(cv::ACCESS_READ);
}






int main(int argc, char **argv){
    cv::Mat img;
     if (!cv::ocl::haveOpenCL())
    {
        std::cout << "OpenCL is not avaiable..." << std::endl;
        exit(EXIT_FAILURE);
    }
    cv::ocl::Context context;
    cv::setNumThreads(0);
    cv::VideoCapture inputVideo(ArgParser::parse(argc, argv));
    if (!context.create(cv::ocl::Device::TYPE_GPU))
    {
        std::cout << "Failed creating the context..." << std::endl;
        exit(EXIT_FAILURE);
    }

    // In OpenCV 3.0.0 beta, only a single device is detected.
    std::cout << context.ndevices() << " GPU devices are detected." << std::endl;
    for (int i = 0; i < context.ndevices(); i++)
    {
        cv::ocl::Device device = context.device(i);
        std::cout << "name                 : " << device.name() << std::endl;
        std::cout << "available            : " << device.available() << std::endl;
        std::cout << "imageSupport         : " << device.imageSupport() << std::endl;
        std::cout << "OpenCL_C_Version     : " << device.OpenCL_C_Version() << std::endl;
        std::cout << std::endl;
    }
    // Select the first device
    cv::ocl::Device(context.device(0));

    while(1){
        inputVideo >> img;
        cv::Mat gray = grayScale(img, context);
        cv::imshow("gray", gray);
        cv::waitKey(3);
        

    }

   return 0;

}